### YamlMime:PythonClass
uid: msal.oauth2cli.assertion.JwtAssertionCreator
name: JwtAssertionCreator
fullName: msal.oauth2cli.assertion.JwtAssertionCreator
module: msal.oauth2cli.assertion
inheritances:
- msal.oauth2cli.assertion.AssertionCreator
summary: Construct a Jwt assertion creator.
constructor:
  syntax: JwtAssertionCreator(key, algorithm, sha1_thumbprint=None, headers=None)
  parameters:
  - name: key
    description: 'An unencrypted private key for signing, in a base64 encoded string.

      It can also be a cryptography `PrivateKey` object,

      which is how you can work with a previously-encrypted key.

      See also [https://github.com/jpadilla/pyjwt/pull/525](https://github.com/jpadilla/pyjwt/pull/525)'
    isRequired: true
    types:
    - <xref:str>
  - name: algorithm
    description: '"RS256", etc.. See [https://pyjwt.readthedocs.io/en/latest/algorithms.html](https://pyjwt.readthedocs.io/en/latest/algorithms.html)

      RSA and ECDSA algorithms require "pip install cryptography".'
    isRequired: true
    types:
    - <xref:str>
  - name: sha1_thumbprint
    description: The x5t aka X.509 certificate SHA-1 thumbprint.
    defaultValue: None
    types:
    - <xref:str>
  - name: headers
    description: Additional headers, e.g. "kid" or "x5c" etc.
    defaultValue: None
    types:
    - <xref:dict>
methods:
- uid: msal.oauth2cli.assertion.JwtAssertionCreator.create_normal_assertion
  name: create_normal_assertion
  summary: 'Create a JWT Assertion.


    Parameters are defined in [https://tools.ietf.org/html/rfc7523#section-3](https://tools.ietf.org/html/rfc7523#section-3)

    Key-value pairs in additional_claims will be added into payload as-is.'
  signature: create_normal_assertion(audience, issuer, subject=None, expires_at=None,
    expires_in=600, issued_at=None, assertion_id=None, not_before=None, additional_claims=None,
    **kwargs)
  parameters:
  - name: audience
    isRequired: true
  - name: issuer
    isRequired: true
  - name: subject
    defaultValue: None
  - name: expires_at
    defaultValue: None
  - name: expires_in
    defaultValue: '600'
  - name: issued_at
    defaultValue: None
  - name: assertion_id
    defaultValue: None
  - name: not_before
    defaultValue: None
  - name: additional_claims
    defaultValue: None
- uid: msal.oauth2cli.assertion.JwtAssertionCreator.sign_assertion
  name: sign_assertion
  summary: 'Create a JWT Assertion.


    Parameters are defined in [https://tools.ietf.org/html/rfc7523#section-3](https://tools.ietf.org/html/rfc7523#section-3)

    Key-value pairs in additional_claims will be added into payload as-is.'
  signature: sign_assertion(audience, issuer, subject=None, expires_at=None, expires_in=600,
    issued_at=None, assertion_id=None, not_before=None, additional_claims=None, **kwargs)
  parameters:
  - name: audience
    isRequired: true
  - name: issuer
    isRequired: true
  - name: subject
    defaultValue: None
  - name: expires_at
    defaultValue: None
  - name: expires_in
    defaultValue: '600'
  - name: issued_at
    defaultValue: None
  - name: assertion_id
    defaultValue: None
  - name: not_before
    defaultValue: None
  - name: additional_claims
    defaultValue: None
